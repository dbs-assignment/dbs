/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package module2;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 *
 * @author karupakula
 */
public class gui extends javax.swing.JFrame {
    
    Set<Integer> ips = new HashSet<Integer>();
    int mod = 10;
    int GD = 2;
    Map<Integer, Bucket> maps;
    ArrayList<Bucket> bmaps;
    
    /** Creates new form gui */
    public gui() {
        this.maps = new HashMap<Integer, Bucket>();
        this.bmaps = new ArrayList<Bucket>();
        for(int i=0; i<2; i++)
        {
            Bucket temp = new Bucket(Integer.toString(i),1);
            bmaps.add(temp);
        }
        
        Bucket temp;
        for(int i=0; i<Math.pow(2,GD); i++)
        {
            int ret[] = new int[4];
            for(int l=0; l<4; l++)
                ret[l] = 0;
            int mval = i;
            int l = 3;
            while(mval>0)
            {
                ret[l] = mval%2;
                mval = mval/2;
                l--;
            }
            
            for(Bucket b : bmaps)
            {
                if(b.id.equals(Integer.toString(ret[3])))
                {
                    maps.put(i, b);
                    break;
                }
            }
                
        }
        initComponents();
         
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        input = new javax.swing.JTextField();
        inputb = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });

        inputb.setText("Insert");
        inputb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(inputb, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(79, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputb))
                .addContainerGap(238, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputActionPerformed

    private void inputbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputbActionPerformed
        // TODO add your handling code here:
        int ip;
        ip = Integer.parseInt(input.getText());
        ips.add(ip);
        
        int[] h_value = new int[4];
        
        Hash hash = new Hash();
        h_value = hash.hval(ip, mod);
        
        int[] gdepth = new int[GD];
        for(int i=0; i<GD; i++)
        {
            gdepth[i] = h_value[4-GD+i];
        }
        
        Directory d = new Directory();
        int direct = d.dirvalue(gdepth);
        
        Misc m = new Misc();
        Bucket temp,tempcreate;
        String s;
        temp = maps.get(direct);
        
        if(!temp.isFull())
        {
            System.out.println("YES");
            temp.addtobuck(ip);
        }
        else
        {
            if(temp.ld < GD)
            {
                s = '1' + temp.id;
                tempcreate = new Bucket(s,temp.ld+1);
                bmaps.add(tempcreate);
                temp.ld = temp.ld+1;
                temp.id = '0' + temp.id;
                for(Bucket b : bmaps)
                    b.buck.clear();
                
                for (Map.Entry mapElement : maps.entrySet())
                {
                    int x = (int) mapElement.getKey(); 
                    int[] bin = m.tobin(x);
                    Bucket b = maps.get(mapElement.getKey());
                    int[] bintemp = new int[b.ld];
                    for(int k=0; k<b.ld; k++)
                        bintemp[k] = bin[4-b.ld+k];
                    
                    s = m.bintostr(bintemp);
                    
                    for(Bucket bt : bmaps)
                    {
                        if(bt.id.equals(s))
                        {
                            maps.replace(x, bt);
                        }
                    }                  
                }               
            }
            else
            {
                s = '1' + temp.id;
                tempcreate = new Bucket(s,temp.ld+1);
                bmaps.add(tempcreate);
                temp.ld = temp.ld+1;
                temp.id = '0' + temp.id;
                for(Bucket b : bmaps)
                    b.buck.clear();
                
                for(int i=0; i<Math.pow(2, GD); i++)
                {
                    int k = i + (int)Math.pow(2, GD);
                    Bucket t;
                    t = maps.get(i);
                    maps.put(k, t);
                }
                GD = GD+1;
                
                for (Map.Entry mapElement : maps.entrySet())
                {
                    int x = (int) mapElement.getKey(); 
                    int[] bin = m.tobin(x);
                    Bucket b = maps.get(mapElement.getKey());
                    int[] bintemp = new int[b.ld];
                    for(int k=0; k<b.ld; k++)
                        bintemp[k] = bin[4-b.ld+k];
                    
                    s = m.bintostr(bintemp);
                    
                    for(Bucket bt : bmaps)
                    {
                        if(bt.id.equals(s))
                        {
                            maps.replace(x, bt);
                        }
                    }                  
                }
                
            }
            
            for(int p : ips)
            {
                h_value = hash.hval(p, mod);
                
                int[] gdepthn = new int[GD];
                for(int a=0; a<GD; a++)
                {
                    gdepthn[a] = h_value[4-GD+a];
                }
                
                direct = d.dirvalue(gdepthn);
                
                Bucket fb;
                fb = maps.get(direct);
                fb.addtobuck(p);
            }
            
        }
        
        Bucket bp;
        System.out.println("------------------------------------------------------------------------------------------------------------------------------");
        for(int i=0; i<Math.pow(2, GD); i++)
        {
            bp = maps.get(i);
            System.out.print(m.bintostr(m.tobin(i)));
            System.out.print("->");
            System.out.print(bp.ld);
            System.out.print("->");
            System.out.print(bp.id);
            System.out.print("->");
            System.out.println(bp.buck.toString());
        }
        
    }//GEN-LAST:event_inputbActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField input;
    private javax.swing.JButton inputb;
    // End of variables declaration//GEN-END:variables

}
